import { Tree, readProjectConfiguration } from '@nrwl/devkit';
import { writeFileSync } from 'fs';
import { join } from 'path';

import { compileFromFile } from 'json-schema-to-typescript';

export default async function (tree: Tree, schema: any) {
  if (schema.name !== 'schema') {
    throw new Error(
      'We only support use this command for @shukun/schema library.',
    );
  }

  const projectConfiguration = readProjectConfiguration(tree, schema.name);
  generate(tree.root, projectConfiguration.root);
}

function generate(treeRoot: string, projectRoot: string) {
  const comment =
    '/* eslint-disable */\n/* tslint:disable */\n/**\n* This file was automatically generated by json-schema-to-typescript.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run json-schema-to-typescript to regenerate this file.\n*/';
  const originFolder = 'json-schemas';
  const targetFolder = 'types';

  const list = ['application', 'attachments'];

  const queue = list.map(async (fileName: string) => {
    const ts = await compileFromFile(
      join(
        treeRoot,
        projectRoot,
        'src',
        originFolder,
        `${fileName}.schema.json`,
      ),
      {
        bannerComment: comment,
        cwd: join(treeRoot, projectRoot, 'src', originFolder),
        enableConstEnums: false,
      },
    );

    writeFileSync(
      join(treeRoot, projectRoot, 'src', targetFolder, `${fileName}.ts`),
      ts,
    );
  });

  Promise.all(queue).then(() =>
    console.log('Generate type files successfully.'),
  );
}
