/* eslint-disable */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^(.)+$".
 */
export type PresenterRepository =
  | PresenterRepositorySimple
  | PresenterRepositorySourceQuery
  | PresenterRepositoryTransformer
  | PresenterRepositoryFlow;
export type PresenterEvent =
  | PresenterEventSetRepository
  | PresenterEventTriggerRepository
  | PresenterEventNavigation;
export type PresenterTreeNode = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^(.)+$".
 */
export type PresenterScreen =
  | PresenterScreenDashboard
  | PresenterScreenWorkshop;

/**
 * Define the presenter contained Stores and UI Elements
 */
export interface PresenterSchema {
  $schema?: string;
  label: string;
  containers: {
    [k: string]: PresenterContainer;
  };
  screens: {
    [k: string]: PresenterScreen;
  };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^(.)+$".
 */
export interface PresenterContainer {
  $schema?: string;
  type: 'page';
  repositories: {
    [k: string]: PresenterRepository;
  };
  widgets: PresenterWidgets;
  root: PresenterTreeNode[];
  tree: PresenterTreeNodes;
}
export interface PresenterRepositorySimple {
  type: 'Simple';
  [k: string]: unknown;
}
export interface PresenterRepositorySourceQuery {
  type: 'SourceQuery';
  atomName: string;
  query: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface PresenterRepositoryTransformer {
  type: 'Transformer';
  func: string;
  [k: string]: unknown;
}
export interface PresenterRepositoryFlow {
  type: 'Flow';
  flowName: string;
  flowInput: string;
  [k: string]: unknown;
}
export interface PresenterWidgets {
  [k: string]: PresenterWidget;
}
/**
 * This interface was referenced by `PresenterWidgets`'s JSON-Schema definition
 * via the `patternProperty` "^(.)+$".
 */
export interface PresenterWidget {
  tag: string;
  label?: string;
  parentSlot?: string;
  properties: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^(.)+$".
     */
    [k: string]:
      | string
      | unknown[]
      | {
          [k: string]: unknown;
        }
      | number
      | boolean;
  };
  events: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^(.)+$".
     */
    [k: string]: PresenterEvent[];
  };
}
export interface PresenterEventSetRepository {
  action: 'setRepository';
  target: string;
  path: string[];
  /**
   * template syntax
   */
  convertor?: string;
  [k: string]: unknown;
}
export interface PresenterEventTriggerRepository {
  action: 'triggerRepository';
  target: string;
  /**
   * template syntax
   */
  convertor?: string;
  [k: string]: unknown;
}
/**
 * Note: the navigation is only used inside app. If want to open external page, please add new event.
 */
export interface PresenterEventNavigation {
  action: 'navigation';
  /**
   * template syntax
   */
  page: string;
  /**
   * template syntax
   */
  search?: string;
  [k: string]: unknown;
}
export interface PresenterTreeNodes {
  /**
   * This interface was referenced by `PresenterTreeNodes`'s JSON-Schema definition
   * via the `patternProperty` "^(.)+$".
   */
  [k: string]: PresenterTreeNode[];
}
export interface PresenterScreenDashboard {
  layout: 'Dashboard';
  slots: {
    main: string;
    menu?: string;
  };
}
export interface PresenterScreenWorkshop {
  layout: 'Workshop';
  slots: {
    main: string;
    menu?: string;
  };
}
