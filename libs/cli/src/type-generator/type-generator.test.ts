import { ApplicationSchema } from '@shukun/schema';
import { format } from 'prettier';

import { TypeGenerator } from './type-generator';
import lowCode from './type-generator.mock.json';

describe('TypeGenerator', () => {
  describe('generate', () => {
    it('should pass, when generate metadata types.', () => {
      const types = new TypeGenerator().generate(lowCode as ApplicationSchema);
      expect(types).toEqual(
        format(
          `
        /* eslint-disable */
        /* tslint:disable */
        /**
         * This file was automatically generated by SHUKUN json-schema.
         */
        import { AttachmentSchema } from "@shukun/schema";
        export type IDString = string;
        export type DateTimeIsoString = string;
        export type AtomAModel = {
          _id: IDString;
          owner?: IDString;
          createdAt?: DateTimeIsoString;
          updatedAt?: DateTimeIsoString;
          text?: string;
          nameText?: string;
          largeText?: string;
          singleSelect?: "test" | "test2" | "test3";
          multiSelect?: "test"[];
          boolean?: boolean;
          dateTime?: DateTimeIsoString;
          integer?: number;
          float?: number;
          currency?: number;
          password?: string;
          manyToMany?: IDString[];
          manyToOne?: IDString;
          attachment?: AttachmentSchema[];
          mixed?: unknown;
          role?: IDString[];
        }
        export const AtomASingleSelectOptions = {
          test: "test",
          test2: "test2",
          test3: "test3",
        };
        export const AtomAMultiSelectOptions = { test: "test" };
        export type AtomBModel = {
          _id: IDString;
          owner?: IDString;
          createdAt?: DateTimeIsoString;
          updatedAt?: DateTimeIsoString;
          number: string;
        };
    `,
          { parser: 'babel' },
        ),
      );
    });
  });
});
