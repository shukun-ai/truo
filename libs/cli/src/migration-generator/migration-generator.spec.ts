import { ApplicationSchema, MetadataFieldType } from '@shukun/schema';

import { generateMigration } from './migration-generator';

describe('generateMigration', () => {
  it('generateMigration', async () => {
    const application: ApplicationSchema = {
      title: 'test',
      metadata: [
        {
          name: 'devices',
          label: 'Devices',
          source: 'postgres://localhost/mock_db',
          electrons: [
            {
              name: 'number',
              label: 'Device ID',
              fieldType: MetadataFieldType.Text,
              isRequired: true,
              isUnique: true,
            },
            {
              name: 'title',
              label: 'Device Label',
              fieldType: MetadataFieldType.Text,
              isRequired: true,
            },
            {
              name: 'type',
              label: 'Type',
              fieldType: MetadataFieldType.SingleSelect,
              isRequired: true,
              options: [
                {
                  key: 'vehicle',
                  label: 'Vehicle Based',
                },
                {
                  key: 'delivery',
                  label: 'Delivery PDA',
                },
                {
                  key: 'ticket',
                  label: 'Ticket PDA',
                },
              ],
            },
          ],
        },
      ],
    };

    const output = `/* eslint-disable */
/* tslint:disable */
/**
 * This file was automatically generated by SHUKUN json-schema.
 */
export const createSchemas = (knex: any, helpers: any) => {
  const schema = knex.schema;
  schema.createTable(helpers.getTableName('devices'), (table: any) => {
    table.string('_id', 255).unique().notNullable();
    table.timestamp('createdAt').nullable();
    table.timestamp('updatedAt').nullable();
    table.string('number', 1000).notNullable().unique();
    table.string('title', 1000).notNullable();
    table.string('type', 1000).notNullable();
    table.primary('_id');
  });
  return schema;
};
`;

    const migration = await generateMigration({
      application,
      style: {
        singleQuote: true,
        trailingComma: 'all',
      },
    });

    expect(migration).toEqual(output);
  });
});
